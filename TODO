class DefaultServletContext:
List<RegisteredServlet>
List<RegisteredFilter>

Target findTarget(String method, String path) {
    // find first servlet, which pattern matches path; add filters, which also matches path
    var servlet = servlets.stream().filter(s -> UrlPatternMatcher.matches(s.mappings(), path)).findFirst()
                 .orElseThrow(() -> new RuntimeException("Not Found: " + path));
    var chainFilters = filters.stream()
        .filter(f -> UrlPatternMatcher.matches(f.mappings(), path))
        .map(RegisteredFilter::filter).toList();
    return new Target(servlet.servlet(), chainFilters);
}

public ServletRegistration addServlet(String name, Servlet servlet) {
    var rs = new RegisteredServlet(name, servlet);
    servlets.add(rs); return rs;
}

public FilterRegistration addFilter(String name, Filter filter) {
    var rf = new RegisteredFilter(name, filter);
    filters.add(rf); return rf;
}

---

record Target(Servlet servlet, List<Filter> filters) {}

public class RegisteredServlet implements ServletRegistration {
    final String name;
    final Servlet servlet;
    final List<String> map = new ArrayList<>();

    public RegisteredServlet(String n, Servlet s) { name=n; servlet=s; }

    @Override public void addMapping(String... p) { map.addAll(List.of(p)); }

    Servlet servlet() { return servlet; }
    List<String> mappings() { return map; }
}

public class RegisteredFilter implements FilterRegistration {
    final String name;
    final Filter filter;
    final List<String> map = new ArrayList<>();

    RegisteredFilter(String n, Filter f) { name=n; filter=f; }

    @Override public void addMapping(String... p) { map.addAll(List.of(p)); }

    Filter filter() { return filter; }
    List<String> mappings() { return map; }
}

---

public final class AppInitializer {

  public void onStartup(ServletContext ctx) {
    ctx.addServlet("noteCreate", NoteCreateServlet())
       .addMapping("/note/*");

    ctx.addFilter("logging", new com.test.app.filter.LoggingFilter())
       .addMapping("/*");
    ctx.addFilter("cors", new com.test.app.filter.CorsFilter())
       .addMapping("/*");
  }
}

---

public final class MiniServletContainer {
  private final DefaultServletContext context = new DefaultServletContext();
  private final List<ServletContextInitializer> initializers;

  public MiniServletContainer(List<ServletContextInitializer> initializers) {
    this.initializers = initializers;
  }

  public void init() throws Exception {
    // 1) викликаємо програмну реєстрацію
    for (var i : initializers)
        i.onStartup(context);
    // 2) ініціалізуємо сервіслети і фільтри
    context.initAll();
  }

  public void handle(com.test.http.HttpRequest rawReq, com.test.http.HttpResponse rawRes) throws Exception {
    var req = RequestAdapter.from(rawReq);
    var res = ResponseAdapter.to(rawRes);
    var target = context.findTarget(req.getMethod(), req.getRequestURI()); // сервлет + фільтри за url
    var chain = new DefaultFilterChain(target.filters(), (r, s) -> target.servlet().service(r, s));
    chain.doFilter(req, res);
  }
}


